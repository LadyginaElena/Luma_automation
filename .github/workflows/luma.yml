# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Luma bild, test and report

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  checks: write
  pull-requests: write
  contents: read

jobs:
  bild:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction
      #----------------------------------------------
      # install Chrom
      #----------------------------------------------
      - name: Update repo
        run: sudo apt-get update
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v0.0.0

  linting_and_tests:
    needs: bild
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #              Python black and flake8
      #----------------------------------------------
      - name: Python black and flake8
        uses: ricardochaves/python-lint@v1.4.0
        with:
          python-root-list: ""
          use-pylint: false
          use-pycodestyle: false
          use-flake8: true
          use-black: true
          use-mypy: false
          use-isort: false
          extra-pylint-options: ""
          extra-pycodestyle-options: ""
          extra-flake8-options: "--count --benchmark --ignore=E501"
          extra-black-options: ". -S"
          extra-mypy-options: ""
          extra-isort-options: ""
      #----------------------------------------------
      #    Run tests and generate junit xml report
      #----------------------------------------------
      - name: Run pytest
        run: poetry run pytest --junitxml report.xml
      - name: Create test summary
        uses: test-summary/action@v2.0
        with:
          paths: report.xml
        if: always()
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
      #----------------------------------------------
      #    run test suite and output coverage file
      #----------------------------------------------
      - name: Test with pytest
        run: poetry run pytest --cov=<project-dir> --cov-report=xml
      #----------------------------------------------
      #             upload coverage stats
      # (requires CODECOV_TOKEN in repository secrets)
      #----------------------------------------------
      - name: Upload coverage
        uses: codecov/codecov-action@v3.1.1
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  report:
    needs: linting_and_tests
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #    Create and deploy allure report
      #----------------------------------------------
      - name: Allure Report with history
        uses: simple-elf/allure-report-action@v1.6
