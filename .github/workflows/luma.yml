# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Luma bild, test and report

on:
   pull_request:
    branches: [ "main" ]

permissions:
  checks: write
  pull-requests: write
  contents: read
  repository-projects: write
  issues: write


jobs:
  bild_linting_and_tests:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      #----------------------------------------------
      #              Python black and flake8
      #----------------------------------------------
      - name: Python black and flake8
        uses: ricardochaves/python-lint@v1.4.0
        with:
          python-root-list: ""
          use-pylint: false
          use-pycodestyle: false
          use-flake8: true
          use-black: true
          use-mypy: false
          use-isort: false
          extra-pylint-options: ""
          extra-pycodestyle-options: ""
          extra-flake8-options: "--count --benchmark --ignore=E501"
          extra-black-options: ". -S"
          extra-mypy-options: ""
          extra-isort-options: ""
      #----------------------------------------------
      #            install Chrom
      #----------------------------------------------
      - name: Update repo
        run: sudo apt-get update
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v0.0.0
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Load cached Poetry installation
        uses: actions/cache@v3
        with:
          path: ~/.local  # the path depends on the OS
          key: poetry-0  # increment to reset cache
      - name: Install Poetry Action
        uses: snok/install-poetry@v1.3.3
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
#      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project dependencies
        run: poetry install
      - name: Allure install
        run: poetry add allure-pytest
      #----------------------------------------------
      #    Run tests and generate allure xml report
      #----------------------------------------------
      - name: Run Test
        if: always()
        run: poetry run pytest --alluredir=allure-results
        continue-on-error: true
      #----------------------------------------------
      #    Ð¡overage to Codecov
      #----------------------------------------------
      - name: Codecov
        uses: codecov/codecov-action@v3.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage/reports/
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          files: ./coverage1.xml,./coverage2.xml
          flags: unittests
          name: codecov-umbrella
          path_to_write_report: ./coverage/codecov_report.txt
          verbose: true







